@using System.Web.Mvc.Html
@using Dragonfly.Migration7To8Helpers
@using Dragonfly.NetModels;
@using Umbraco.Core.PropertyEditors

@inherits UmbracoViewPage<StatusMessage>

@{
    var status = Model;

    var SpecialMessage = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "SpecialMessage");
    var SpecialMessageClass = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "SpecialMessageClass");

    var AllPropertyEditorTypes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllPropertyEditorTypes") as IEnumerable<IDataEditor>;
    var AllDataTypes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllDataTypes") as IEnumerable<IDataType>;
    var AllDocTypes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllDocTypes") as IEnumerable<IContentType>;
    var AllContentCompositions = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllContentCompositions") as IEnumerable<IContentTypeComposition>;
    var AllContentNodes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllContentNodes") as IEnumerable<IContent>;
    var AllMediaTypes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllMediaTypes") as IEnumerable<IMediaType>;
    var AllMediaNodes = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllMediaNodes") as IEnumerable<IMedia>;
    var AllMediaCompositions = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewData(ViewData, "AllMediaCompositions") as IEnumerable<IContentTypeComposition>;


    var pvSS = ViewHelpers.GetViewsPath() + "Partials/StylesScripts.cshtml";
    var pvStatus = ViewHelpers.GetViewsPath() + "Partials/StatusMessage.cshtml";
    var pvFilesList = ViewHelpers.GetViewsPath() + "Partials/FilesList.cshtml";

}
<!DOCTYPE html>
<html>
<head>
    @Html.Partial(pvSS, "styles")
</head>
<body>
    <div class="container">

        <h1>Dragonfly Migration 7 to 8 Helpers</h1>
        @if (!status.Success)
        {
            @Html.Partial(pvStatus, status)
        }
        else
        {
            if (SpecialMessage != "")
            {
                <div class="p-3 mb-2 @SpecialMessageClass text-white">
                    @Html.Raw(SpecialMessage)
                </div>
            }

        }
        <ul>
            <li><a href="#PropEditors">Edit Data By Property Type</a></li>
            <li><a href="#DataTypes">Edit Data By DataType</a></li>
            <li><a href="#DocTypes">Edit Data By DocType</a></li>
            <li><a href="#MediaTypes">Edit Data By MediaType</a></li>
        </ul>

        @if (AllPropertyEditorTypes != null)
        {
            <h3 id="PropEditors">Edit Data By Property Type</h3>
            <ol>
                @foreach (var editor in AllPropertyEditorTypes.OrderBy(n => n.Name))
                {
                    var url = string.Format("/Umbraco/backoffice/Api/MigrationHelperApi/StartPropertyEditorType?PropertyEditorAlias={0}", editor.Alias);
                <li><a href="@url">@editor.Name</a> (@editor.Alias)</li>
                }
            </ol>
        }

        @if (AllDataTypes != null)
        {
            <h3 id="DataTypes">Edit Data By DataType</h3>
            <p>@AllDataTypes.Count() total DataTypes</p>

            var dataTypesInFolders = new GroupingCollection<IDataType>(AllDataTypes);
            dataTypesInFolders.GroupItems<string>(n => ViewHelpers.GetDataTypeFolderPath(n));

            foreach (var group in dataTypesInFolders.Groups.OrderBy(g => g.GroupName["Key"]))
            {
                //var folderId = Convert.ToInt32(group.GroupName["Key"]);
                //var folderContainer = Services.DataTypeService.GetContainer(folderId);
                //var folderName = folderContainer!=null ? folderContainer.Name :"[ROOT]";

                var folderName = group.GroupName["Key"];
                <p>
                    <b>@folderName</b>
                    <ol>
                        @foreach (var dt in group.Collection.OrderBy(n => n.Name))
                        {
                            var url = string.Format("/Umbraco/backoffice/Api/MigrationHelperApi/StartDataType?DataTypeId={0}", dt.Id.ToString());
                        <li><a href="@url" target="_blank">@dt.Name</a> (@dt.EditorAlias)</li>
                        }
                    </ol>
                </p>
            }
        }

        @if (AllDocTypes != null)
        {
            <h3 id="DocTypes">Edit Data By DocType</h3>
            <p>@AllDocTypes.Count() total DocTypes</p>

            var allCompIds = AllContentCompositions.Select(n => n.Id);
            var docTypesInFolders = new GroupingCollection<IContentType>(AllDocTypes);
            docTypesInFolders.GroupItems<string>(n => ViewHelpers.GetDocTypeFolderPath(n));

            foreach (var group in docTypesInFolders.Groups.OrderBy(g => g.GroupName["Key"]))
            {
                //var folderId = Convert.ToInt32(group.GroupName["Key"]);
                //var folderContainer = Services.DataTypeService.GetContainer(folderId);
                //var folderName = folderContainer!=null ? folderContainer.Name :"[ROOT]";

                var folderName = group.GroupName["Key"];
                <p>
                    <b>@folderName</b>
                    <ol>
                        @foreach (var doc in group.Collection.OrderBy(n => n.Name))
                        {
                            var matchingContent = AllContentNodes.Where(n => n.ContentTypeId == doc.Id);
                            var qtyContent = matchingContent.Count();
                            var contentBadgeColor = qtyContent == 0 ? "badge-warning" : "badge-info";
                            var comps = doc.ContentTypeComposition;
                            var isComp = allCompIds.Contains(doc.Id);
                            var compInfo = isComp ? " <span class=\"badge badge-dark\">Is Composition</span>" : "";
                            var url = string.Format("/Umbraco/backoffice/Api/MigrationHelperApi/StartDocType?DocTypeId={0}", doc.Id.ToString());
                        <li>
                            <a href="@url" target="_blank">@doc.Name</a> (@doc.Alias) @Html.Raw(compInfo)
                            <span tooltip="# of Content Nodes" class="badge badge-pill @contentBadgeColor">@qtyContent</span>
                            @if (comps.Any())
                            {
                                <span>Uses Compositions:</span>
                                foreach (var comp in comps)
                                {
                                    var urlComp = string.Format("/Umbraco/backoffice/Api/MigrationHelperApi/StartDocType?DocTypeId={0}", comp.Id.ToString());
                                    <a href="@urlComp" target="_blank"><span class="badge badge-secondary">@comp.Name (@comp.Alias)</span></a>
                                }

                            }
                        </li>
                        }
                    </ol>
                </p>
            }
        }

        @if (AllMediaTypes != null)
        {
            <h3 id="MediaTypes">Edit Data By MediaType</h3>
            <p>@AllMediaTypes.Count() total MediaTypes</p>

            var allCompIds = AllMediaCompositions.Select(n => n.Id).ToList();
            var mediaTypesInFolders = new GroupingCollection<IMediaType>(AllMediaTypes);
            mediaTypesInFolders.GroupItems<string>(n => ViewHelpers.GetMediaTypeFolderPath(n));

            foreach (var group in mediaTypesInFolders.Groups.OrderBy(g => g.GroupName["Key"]))
            {
                //var folderId = Convert.ToInt32(group.GroupName["Key"]);
                //var folderContainer = Services.DataTypeService.GetContainer(folderId);
                //var folderName = folderContainer!=null ? folderContainer.Name :"[ROOT]";

                var folderName = group.GroupName["Key"];
                <p>
                    <b>@folderName</b>
                    <ol>
                        @foreach (var doc in group.Collection.OrderBy(n => n.Name))
                        {
                            var matchingMedia = AllMediaNodes.Where(n => n.ContentTypeId == doc.Id);
                            var qtyNodes = matchingMedia.Count();
                            var contentBadgeColor = qtyNodes == 0 ? "badge-warning" : "badge-info";
                            var comps = doc.ContentTypeComposition;
                            var isComp = allCompIds.Contains(doc.Id);
                            var compInfo = isComp ? " <span class=\"badge badge-dark\">Is Composition</span>" : "";
                            var url = string.Format("/Umbraco/backoffice/Api/MigrationHelperApi/StartMediaType?MediaTypeId={0}", doc.Id.ToString());
                        <li>
                            <a href="@url" target="_blank">@doc.Name</a> (@doc.Alias) @Html.Raw(compInfo)
                            <span tooltip="# of Media Nodes" class="badge badge-pill @contentBadgeColor">@qtyNodes</span>
                            @if (comps.Any())
                            {
                                <span>Uses Compositions:</span>
                                foreach (var comp in comps)
                                {
                                    var urlComp = string.Format("/Umbraco/backoffice/Api/MigrationHelperApi/StartMediaType?MediaTypeId={0}", comp.Id.ToString());
                                    <a href="@urlComp" target="_blank"><span class="badge badge-secondary">@comp.Name (@comp.Alias)</span></a>
                                }

                            }
                        </li>
                        }
                    </ol>
                </p>
            }
        }

        @*<div class="d-inline-flex p-2" style="padding: .5em 0;">
            <a class="btn btn-sm btn-success mr-2" href="/Umbraco/backoffice/Api/xx/TestAllNodesAndSave">Test All Nodes Now</a>
        </div>
        <div class="d-inline-flex p-2" style="padding: .5em 0;">
            <a class="btn btn-sm btn-success mr-2" href="/Umbraco/backoffice/Api/xx/TestDescendantNodesAndSave?StartNode=0">Test Subset of Nodes...</a>
        </div>*@


    </div>

    @*@Html.Partial(pvSS, "scripts")*@
</body>
</html>

